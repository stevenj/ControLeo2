/*******************************************************************************
 * HEAVILY MODIFIED VERSION
* ControLeo Reflow Oven Controller
* Author: Peter Easton
* Website: whizoo.com
* Software written to work best on ControLeo2 (www.whizoo.com)
*
* This is an example of a reflow oven controller. The reflow curve below is for a
* lead-free profile.  The Reflow Wizard is capable of self-calibrating a reflow oven
* to the J-STD-20 reflow specification.
*
* Temperature (Degree Celcius)                 Magic Happens Here!
* 245-|                                               x  x  
*     |                                            x        x
*     |                                         x              x
*     |                                      x                    x
* 200-|                                   x                          x
*     |                              x    |                          |   x   
*     |                         x         |                          |       x
*     |                    x              |                          |
* 150-|               x                   |                          |
*     |             x |                   |                          |
*     |           x   |                   |                          | 
*     |         x     |                   |                          | 
*     |       x       |                   |                          | 
*     |     x         |                   |                          |
*     |   x           |                   |                          |
* 30 -| x             |                   |                          |
*     |<  60 - 90 s  >|<    60 - 120 s   >|<       60 - 150 s       >|
*     | Preheat Stage |   Soaking Stage   |       Reflow Stage       | Cool
*  0  |_ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
*                                                                Time (Seconds)
*
* This firmware builds on the work of other talented individuals:
* ==========================================
* Rocketscream (www.rocketscream.com)
* Produced the Arduino reflow oven shield and code that inspired this project.
*
* ==========================================
* Limor Fried of Adafruit (www.adafruit.com)
* Author of Arduino MAX6675 library. Adafruit has been the source of tonnes of
* tutorials, examples, and libraries for everyone to learn.
*
* Disclaimer
* ==========
* Dealing with high voltage is a very dangerous act! Please make sure you know
* what you are dealing with and have proper knowledge before hand. Your use of 
* any information or materials on this reflow oven controller is entirely at 
* your own risk, for which we shall not be liable. 
*
* Released under WTFPL license.
*
* Revision  Description
* ========  ===========
* 1.0       Initial public release. (21 October 2014)
* 1.1       Bug fixes (30 December 2014)
*           - Oven temperature might not reach configured maximum temperature
*           - Adjusted values so learning happens faster
*           - Other minor improvements
* 1.2       Improvements (6 January 2014)
*           - Take temperature readings every 0.125s and average them.  Fixes errors
*             generated by noise from convection fans
*           - Refined learning mode so learning should happen in fewer runs
*           - Improved loop duration timer to enhance timing
*           - Moved some strings from RAM to Flash (there is only 2.5Kb of RAM)
* 1.3       No user-facing changes (19 January 2015)
*           - Fixed compiler warnings for Arduino 1.5.8
* 1.4       Added support for servos (6 February 2015)
*           - When using a servo, please connect a large capacitor (e.g. 220uF, 16V)
*             between +5V and GND to avoid a microcontroller reset when the servo
*             stall current causes the voltage to drop.  Small servos may not need
*             a capacitor
*           - Connect the servo to +5V, GND and D3
*           - The open and close positions are configured in the Settings menu
*           - The oven door will open when the reflow is done, and close at 50C.
*             The door is also closed when ControLeo2 is turned on.
* 1.5       Minor improvements (15 July 2015)
*           - Made code easier to read by using “F” macro for strings stored in flash
*           - Minor adjustments to reflow values 
*           - Restrict the maximum duty cycle for the boost element to 60%.  It
*             should never need more than this!
*           - Make thermocouple more tolerant of transient errors, including
*             FAULT_OPEN
* 1.6       Added ability to bake (29 March 2016)
*           - Ability to bake was requested by a number of users, and was implemented
*             by Bernhard Kraft and Mark Foster.  Bernhard's implementation was added
*             to the code base.  This is a simple algorithm that only implements the
*             "P" (proportional) of the PID algorithm.  Temperatures may overshoot
*             initially, but for the rest of the baking time (up to 18 hours) the
*             temperature will be a few degrees below the target temperature.
*           - Added option to Setup menu to restart learning mode.
*           - Added option to Setup menu to reset to factory mode (erase everything)
* 1.7       Added support for cooling fan (7 June 2106)
*           - Any of the 4 outputs can be configured to control a cooling fan
*           - When bake finishes, the servo will open the oven door (thanks jcwren)
* 1.8       Major changes to bake functionality (22 June 2016)
*           - Complete rewrite of bake functionality.  Users reported that ControLeo2
*             would sometimes freeze during bake, leaving one or more elements on.
*           - Added Integral (the "I" of PID) to bake, so temperatures come closer
*             to desired bake temperature
*           - Added bake countdown timer to LCD screen
*           - Fixed bug where oven door would not close once bake completed.
* 1.9       Minor change to bake (25 June 2016)
*           - Initial bake duty cycle is based on desired bake temperature
* 2.0       Minor improvements (15 January 2017)
*           - Prevent bake/reflow before outputs are configured
*           - Limit top element to 80% power.  There is never a good reason to go 
*             higher than this.         
*           - Minor tweaks to learning mode, to reduce number of times this needs to
*             be run.
* 3.0       Heavily Modified, Changes to UI and Multiple profiles added.            
*           Eliminate Floating point.
*******************************************************************************/


// ***** INCLUDES *****
#include "ControLeo2.h"
#include "ReflowWizard.h"
#include "LcdFont.h"
#include "Tones.h"

// ***** TYPE DEFINITIONS *****

ControLeo2_LCD       lcd;
ControLeo2_Buttons   buttons;
ControLeo2_MAX31855  temps;

int mode = 0;

void setup() {
    // Log data to the computer using USB
    Serial.begin(115200); 
    while (!Serial) { } // wait for serial port to connect. Needed for Leonardo only
    
    Serial.println(FM("Reflow Wizard - ControLeo2 Oven Controller - V3.0"));
  
    // *********** Start of ControLeo2 initialization ***********
  
    // Set the relays as outputs and turn them off
    // The relay outputs are on D4 to D7 (4 outputs)
    for (int i=4; i<8; i++) {
        pinMode(i, OUTPUT);
        digitalWrite(i, LOW);
    }

    initTones();
  
    lcd.defineCustomChars(custom_chars);
    
    lcd.PrintStr(0,0, F("ReflowWiz - V3.0"));
    lcd.ScrollLine(0,2,F("Reflow Wizard - ControLeo2 Oven Controller - V3.0"));
    
    // Initialize the timer used to control the servo
    initializeServo();
  
    // Write the initial message on the LCD screen
    lcdPrintLine_P(0, PSTRM("   ControLeo2"));
    lcdPrintLine_P(1, PSTRM("Reflow Oven v3.0"));
    delay(100);
    playTones(TUNE_STARTUP);
    delay(3000);
    
    // Initialize the EEPROM, after flashing bootloader
    InitializeSettingsIfNeccessary();
    lcd.clear();
    
    // Go straight to reflow menu if learning is complete
    if (getSetting(SETTING_LEARNING_MODE) == false)
        mode = 2;
      
    // Make sure the oven door is closed
    setServoPosition(getSetting(SETTING_SERVO_CLOSED_DEGREES), 1000);
  
  
    // *********** End of ControLeo2 initialization ***********
  
}


// The main menu has 4 options
const boolean (*action[NO_OF_MODES])() = {Testing, Config, Reflow, Bake};
const char* const modes[NO_OF_MODES] PROGMEM = {("Test Outputs?"), 
                                                ("Setup?"),
                                                ("Start Reflow?"),
                                                ("Start Baking?")};

#define DISPLAY_REFRESH_RATE_HZ (20)

// Refresh Periodic tasks, Thermocouple reading, Screen Overlay, Screen Drawing, Key Handling
void refresh()
{
    // Call this in the main loop, will cause display and temps to be updated as required.
    static unsigned long previous_time = 0;
    unsigned long current_time  = micros();
    int16_t temperature;
    
    temps.RefreshTemps();
    
    if ((current_time - previous_time) >= (1000000 / DISPLAY_REFRESH_RATE_HZ)) {
        // Get Latest Temperature Readings.
        // Draw Temperature Overlay on screen.
        // Temp is always shown in bottom left corner, and consumes 5 Characters.
        temperature = temps.readThermocouple(0);
        if (temperature < MAX_TEMPERATURE) {
            lcd.PrintInt(0,1,3,temps.readThermocouple(0));
            lcd.setChar(3, 1, 0x01); // Temperature Marking (Degrees C)
            lcd.setChar(4, 1, temps.readThermocoupleDrift()); // Temp Direction
        } else {
            lcd.PrintStr(0,1,temps.getFaultStr());                      
        }
        
        // Redraw screen.  
        lcd.refresh();

        previous_time = current_time;
    }
  
    // Handle Button input processing.
    buttons.ButtonProcessing();
}

void loop()
{
  static boolean drawMenu = true;
  static boolean showMainMenu = true;
  static int counter = 0;
  static unsigned long nextLoopTime = 50; // Should be 3000 + 100 + fudge factor + 50 - but no harm making it 50!

  refresh();
  
  if (showMainMenu) {
    if (drawMenu) {
      drawMenu = false;
      lcdPrintLine_P(0, modes[mode]);
      lcdPrintLine_P(1, PSTRM("          Yes ->"));
    }
        
    // Get the button press to select the mode or move to the next mode
    switch (buttons.GetKeypress()) {
    case BUTTON_TOP_RELEASE:
      // Move to the next mode
      mode = (mode + 1) % NO_OF_MODES;
      drawMenu = true;
      break;
    case BUTTON_BOT_RELEASE:
      // Move to the selected mode
      showMainMenu = false;
      drawMenu = true;
      break;
    }
  }
  else {
    // Go to the mode's menu system
    if ((*action[mode])() == NEXT_MODE)
      showMainMenu = true;
  }
  
  // Execute this loop 20 times per second (every 50ms). 
  if (millis() < nextLoopTime)
    delay(nextLoopTime - millis());
  nextLoopTime += 50;
}

// Display a line on the LCD screen
// The provided string is padded to take up the whole line
// There is less flicker when overwriting characters on the screen, compared
// to clearing the screen and writing new information
void lcdPrintLine(int line, const char* str) {
  lcd.PrintStr(0,line, str);
}
// Same as above using PROGMEM to save SRAM
// works with constant strings only
void lcdPrintLine_P(int line, const char* str) {
  lcd.PrintStr(0,line, str);
}



